{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
    "static_cast": {
        "prefix": "sc",
        "description": "static_cast<type>(expression)",
        "body": [
            "static_cast<${1:uint32_t}>(${2:${TM_SELECTED_TEXT:expression}})$0"
        ]
    },
    "XR_NULL_HANDLE": {
        "prefix": "xrnull",
        "description": "XR_NULL_HANDLE",
        "body": [
            "XR_NULL_HANDLE"
        ]
    },
    "fmt::print": {
        "prefix": "fprint",
        "description": "fmt::print",
        "body": [
            "fmt::print(\"{}\", $0);"
        ]
    },
    "u8": {
        "prefix": "u8",
        "description": "uint8_t",
        "body": [
            "uint8_t"
        ]
    },
    "u16": {
        "prefix": "u16",
        "description": "uint16_t",
        "body": [
            "uint16_t"
        ]
    },
    "u32": {
        "prefix": "u32",
        "description": "uint32_t",
        "body": [
            "uint32_t"
        ]
    },
    "u64": {
        "prefix": "u64",
        "description": "uint64_t",
        "body": [
            "uint64_t"
        ]
    },
    "i8": {
        "prefix": "i8",
        "description": "int8_t",
        "body": [
            "int8_t"
        ]
    },
    "i16": {
        "prefix": "i16",
        "description": "int16_t",
        "body": [
            "int16_t"
        ]
    },
    "i32": {
        "prefix": "i32",
        "description": "int32_t",
        "body": [
            "int32_t"
        ]
    },
    "i64": {
        "prefix": "i64",
        "description": "int64_t",
        "body": [
            "int64_t"
        ]
    },
    "size_t": {
        "prefix": "size_t",
        "description": "size_t",
        "body": [
            "size_t"
        ]
    },
    "str": {
        "prefix": "str",
        "description": "std::string",
        "body": [
            "std::string"
        ]
    },
    "wstr": {
        "prefix": "wstr",
        "description": "std::wstring",
        "body": [
            "std::wstring"
        ]
    },
    "nullptr": {
        "prefix": "nullptr",
        "description": "nullptr",
        "body": [
            "nullptr"
        ]
    },
    "nano": {
        "prefix": "nano",
        "description": "std::chrono::nanoseconds",
        "body": [
            "std::chrono::nanoseconds"
        ]
    },
    "move": {
        "prefix": "move",
        "description": "std::move(expression)",
        "body": [
            "std::move(${1:${TM_SELECTED_TEXT:expression}})$0"
        ]
    },
    "shared_ptr": {
        "prefix": "shared_ptr",
        "description": "std::shared_ptr<type>",
        "body": [
            "std::shared_ptr<${1:${TM_SELECTED_TEXT:type}}>$0"
        ]
    },
    "unique_ptr": {
        "prefix": "unique_ptr",
        "description": "std::unique_ptr<type>",
        "body": [
            "std::unique_ptr<${1:${TM_SELECTED_TEXT:type}}>$0"
        ]
    },
    "vector": {
        "prefix": "vector",
        "description": "std::vector<type>",
        "body": [
            "std::vector<${1:${TM_SELECTED_TEXT:type}}>$0"
        ]
    },
    "array": {
        "prefix": "array",
        "description": "std::array<type, size>",
        "body": [
            "std::array<${1:${TM_SELECTED_TEXT:type}}, ${2:size}>$0"
        ]
    },
    "unordered_map": {
        "prefix": "umap",
        "description": "std::unordered_map<key, value>",
        "body": [
            "std::unordered_map<${1:/*key*/}, ${2:/*value*/}>$0"
        ]
    },
    "fmt::println": {
        "prefix": "fprintln",
        "description": "fmt::println",
        "body": [
            "fmt::print(\"{}\\n\", $0);"
        ]
    },
    "make_unique": {
        "prefix": "make_unique",
        "description": "std::make_unique<type>()",
        "body": [
            "std::make_unique<${1:${TM_SELECTED_TEXT:type}}>($0)"
        ]
    },
    "make_shared": {
        "prefix": "make_shared",
        "description": "std::make_shared<type>()",
        "body": [
            "std::make_shared<${1:${TM_SELECTED_TEXT:type}}>($0)"
        ]
    },
    "interface": {
        "prefix": "interface",
        "description": "interface",
        "body": [
            "struct $1 {\n    virtual ~$1() = default;$0\n};"
        ]
    },
    "for_index": {
        "prefix": "fori",
        "description": "for (int = 0; i < len; ++i) {}",
        "body": [
            "for (size_t ${2:i} = 0; $2 < ${1:len}; ++$2) {$0}"
        ]
    },
    "for_len": {
        "prefix": ["for_len"],
        "description": "for (int = 0; i < len; ++i) {}",
        "body": [
            "const int ${2:len} = ${1:${TM_SELECTED_TEXT:nums}};\nfor (size_t ${3:i} = 0; $3 < ${2:len}; ++$3) {\n$0\n}"
        ]
    },
    "for_each": {
        "prefix": ["for_each"],
        "description": "for (const auto& value : items) {}",
        "body": [
            "for (const auto& ${1:value} : ${2:items}) {\n$0\n}"
        ]
    },
    "sort": {
        "prefix": ["sort"],
        "description": "sort(items.begin(), items.end());",
        "body": [
            "sort(${1:${TM_SELECTED_TEXT:items}}.begin(), $1.end());"
        ]
    },
}